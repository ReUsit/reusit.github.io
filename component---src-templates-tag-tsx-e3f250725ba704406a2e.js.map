{"version":3,"sources":["webpack:///./src/components/post-grid/index.tsx","webpack:///./node_modules/core-js/modules/es6.string.small.js","webpack:///./src/templates/tag.tsx","webpack:///./src/components/subheader/index.tsx","webpack:///./src/components/card/style.tsx","webpack:///./src/components/card/index.tsx"],"names":["PostGrid","posts","map","post","index","title","frontmatter","path","featuredImage","childImageSharp","content","excerpt","key","meta","time","created","timePretty","createdPretty","tag","tags","length","createHTML","this","TagTemplate","data","location","edges","node","name","color","Theme","layout","primaryColor","icon","featured","bigHeader","type","subtitle","backgroundColor","query","StyledSubheader","styled","div","props","textColor","SubheaderTitle","h1","SubheaderSubtitle","small","Subheader","StyledCard","Link","StyledArticle","article","breakpoints","sm","FeaturedImage","Img","halfImage","CardContent","section","compact","CardMeta","CardTitle","h2","Card","style","children","to","fixed","sizes","dateTime","dangerouslySetInnerHTML","__html"],"mappings":"8FAAA,iDA8BeA,IArBoC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACjD,kBAAC,IAAD,KACGA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEC,MAAOF,EAAKG,YAAYD,MACxBE,KAAMJ,EAAKG,YAAYC,KACvBC,cAAeL,EAAKG,YAAYE,cAAgBL,EAAKG,YAAYE,cAAcC,gBAAkB,KACjGC,QAASP,EAAKG,YAAYK,QAC1BC,IAAKR,EACLS,KACE,CACEC,KAAMX,EAAKG,YAAYS,QACvBC,WAAYb,EAAKG,YAAYW,cAC7BC,IAAKf,EAAKG,YAAYa,KAAKC,OAAS,EAAIjB,EAAKG,YAAYa,KAAK,GAAK,c,oCCpB/E,EAAQ,OAAR,CAA0B,SAAS,SAAUE,GAC3C,OAAO,WACL,OAAOA,EAAWC,KAAM,QAAS,GAAI,S,8KCyC1BC,UA1B0C,SAAC,GAAqB,IAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAC3DP,EAAUM,EAAKN,IACbjB,EAAQuB,EAAKvB,MAAMyB,MAAMxB,KAAI,SAAAyB,GAAI,OAAIA,EAAKA,QAWhD,OATMT,GAAOjB,EAAMmB,OAAS,IAC1BF,EAAM,CACJU,KAAM3B,EAAM,GAAGK,YAAYa,KAAK,GAChCU,MAAOC,IAAMC,OAAOC,aACpBC,KAAM,KACNC,UAAU,IAKZ,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,IAAD,CACE9B,MAAOa,EAAIU,KACXH,SAAUA,EACVW,KAAI,WAEN,kBAAC,IAAD,CAAW/B,MAAOa,EAAIU,KAAMS,SAAapC,EAAMmB,OAAX,SAA2BkB,gBAAiBpB,EAAIW,QACpF,kBAAC,IAAD,CAAU5B,MAAOA,MAOhB,IAAMsC,EAAQ,c,6FCpCfC,EAAkBC,UAAOC,IAAV,iFAAGD,CAAH,oGACC,SAAAE,GAAK,OAAIA,EAAML,gBAAkBK,EAAML,gBAAkB,UACpE,SAAAK,GAAK,OAAIA,EAAMC,UAAYD,EAAMC,UAAY,UAOlDC,EAAiBJ,UAAOK,GAAV,gFAAGL,CAAH,2EAQdM,EAAoBN,UAAOO,MAAV,mFAAGP,CAAH,kDAiBRQ,IAXsC,SAAC,GAAD,IAAE5C,EAAF,EAAEA,MAAOgC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,gBAAiBM,EAApC,EAAoCA,UAApC,OACnD,kBAACJ,EAAD,CAAiBF,gBAAiBA,EAAiBM,UAAWA,GAC5D,kBAAC,IAAD,KACE,kBAACC,EAAD,KACGxC,EACD,kBAAC0C,EAAD,KAAoBV,Q,gKCjCfa,EAAaT,kBAAOU,QAAV,oEAAGV,CAAH,uPAgBVW,EAAgBX,UAAOY,QAAV,uEAAGZ,CAAH,wFAIHX,IAAMwB,YAAYC,IAK5BC,EAAgBf,kBAAOgB,KAAV,uEAAGhB,CAAH,qGAMtB,SAAAE,GAAK,OAAIA,EAAMe,UAAN,mJAOY5B,IAAMwB,YAAYC,GAP9B,0LAoBAI,EAAclB,UAAOmB,QAAV,qEAAGnB,CAAH,uDACX,SAAAE,GAAK,OAAIA,EAAMkB,QAAU,OAAS,UAWlCC,EAAWrB,UAAOmB,QAAV,kEAAGnB,CAAH,6GASRsB,EAAYtB,UAAOuB,GAAV,mEAAGvB,CAAH,yBC3DTwB,EAAqC,SAAC,GAAD,IACG5D,EADH,EACGA,MACAQ,EAFH,EAEGA,KACAN,EAHH,EAGGA,KACAC,EAJH,EAIGA,cACAE,EALH,EAKGA,QALH,IAMGgD,iBANH,aAOGG,eAPH,SAQGK,EARH,EAQGA,MACAC,EATH,EASGA,SATH,OAWhD,kBAACf,EAAD,CAAec,MAAOA,GACpB,kBAAChB,EAAD,CAAYkB,GAAI7D,GAEZC,GAAiBA,EAAc6D,OACjC,kBAACb,EAAD,CAAea,MAAO7D,EAAc6D,MAAOX,UAAWA,IAEpDlD,GAAiBA,EAAc8D,OACjC,kBAACd,EAAD,CAAec,MAAO9D,EAAc8D,MAAOZ,UAAWA,IAEtD,kBAACC,EAAD,CAAaE,QAASA,GACnBM,EACD,gCACGtD,GACD,kBAACiD,EAAD,KACGjD,EAAKK,KAAO,oCAAGL,EAAKK,KACpBL,EAAKC,MACN,0BAAMyD,SAAU1D,EAAKC,MAAOD,EAAKG,aAIlCX,GACD,kBAAC0D,EAAD,KAAY1D,IAGbK,GACD,uBAAG8D,wBAAyB,CAACC,OAAQ/D","file":"component---src-templates-tag-tsx-e3f250725ba704406a2e.js","sourcesContent":["import React, {FunctionComponent} from \"react\";\nimport {Post} from \"../../utils/models\";\nimport {Grid} from \"../common\";\nimport {Card} from \"../card\";\n\ninterface PostGridProps {\n  posts: Post[];\n}\n\nconst PostGrid: FunctionComponent<PostGridProps> = ({posts}) => (\n  <Grid>\n    {posts.map((post, index) => (\n      <Card\n        title={post.frontmatter.title}\n        path={post.frontmatter.path}\n        featuredImage={post.frontmatter.featuredImage ? post.frontmatter.featuredImage.childImageSharp : null}\n        content={post.frontmatter.excerpt}\n        key={index}\n        meta={\n          {\n            time: post.frontmatter.created,\n            timePretty: post.frontmatter.createdPretty,\n            tag: post.frontmatter.tags.length > 0 ? post.frontmatter.tags[0] : null,\n          }\n        }\n      />\n    ))}\n  </Grid>\n);\n\nexport default PostGrid;\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","import React, {FunctionComponent} from \"react\";\nimport Layout from \"../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {Post, Tag} from \"../utils/models\";\nimport Subheader from \"../components/subheader\";\nimport SEO from \"../components/seo\";\nimport Theme from \"../styles/theme\";\nimport PostGrid from \"../components/post-grid\";\n\ninterface TagTemplateProps {\n  data: {\n    tag: Tag;\n    posts: {\n      edges: Array<{ node: Post }>;\n    }\n  };\n  location: Location;\n}\n\nconst TagTemplate: FunctionComponent<TagTemplateProps> = ({data, location}) => {\n  let tag     = data.tag;\n  const posts = data.posts.edges.map(node => node.node);\n\n  if (! tag && posts.length > 0) {\n    tag = {\n      name: posts[0].frontmatter.tags[0],\n      color: Theme.layout.primaryColor,\n      icon: null,\n      featured: false,\n    };\n  }\n\n  return (\n    <Layout bigHeader={false}>\n      <SEO\n        title={tag.name}\n        location={location}\n        type={`Series`}\n      />\n      <Subheader title={tag.name} subtitle={`${posts.length} posts`} backgroundColor={tag.color}/>\n      <PostGrid posts={posts} />\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const query = graphql`\n  query($tag: String!) {\n    tag: tags(name: { eq: $tag }) {\n      name\n      color\n    }\n    posts: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: {regex: \"/(posts)/.*\\\\\\\\.md$/\"},\n        frontmatter: {tags: {eq: $tag}}\n      },\n      sort: {fields: frontmatter___created, order: DESC}\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            path\n            tags\n            excerpt\n            created\n            createdPretty: created(formatString: \"DD MMMM, YYYY\")\n            featuredImage {\n              childImageSharp {\n                sizes(maxWidth: 800, quality: 100) {\n                  base64\n                  aspectRatio\n                  src\n                  srcSet\n                  sizes\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, {FunctionComponent} from \"react\";\nimport styled from \"styled-components\";\nimport {Container} from \"../common\";\n\ninterface SubheaderProps {\n  title: string;\n  subtitle?: string;\n  backgroundColor?: string;\n  textColor?: string;\n}\n\nconst StyledSubheader = styled.div<Pick<SubheaderProps, 'backgroundColor' | 'textColor'>>`\n  background-color: ${props => props.backgroundColor ? props.backgroundColor : '#000'};\n  color: ${props => props.textColor ? props.textColor : '#fff'};\n  display: flex;\n  align-items: center;\n  height: 90px;\n  margin-bottom: 30px;\n`;\n\nconst SubheaderTitle = styled.h1`\n  font-size: 1.2em;\n  font-weight: bold;\n  color: #fff;\n  margin: 0;\n  line-height: 1em;\n`;\n\nconst SubheaderSubtitle = styled.small`\n  font-weight: normal;\n  display: block;\n  opacity: .9;\n`;\n\nconst Subheader: FunctionComponent<SubheaderProps> = ({title, subtitle, backgroundColor, textColor}) => (\n  <StyledSubheader backgroundColor={backgroundColor} textColor={textColor}>\n    <Container>\n      <SubheaderTitle>\n        {title}\n        <SubheaderSubtitle>{subtitle}</SubheaderSubtitle>\n      </SubheaderTitle>\n    </Container>\n  </StyledSubheader>\n);\n\nexport default Subheader;\n","import styled from \"styled-components\";\nimport {Link} from \"gatsby\";\nimport Theme from \"../../styles/theme\";\nimport Img from \"gatsby-image\";\nimport {CardProps} from \"./index\";\n\nexport const StyledCard = styled(Link)`\n  display: block;\n  background-color: #fff;\n  border-radius: 3px;\n  box-shadow: 0 1px 1px #e6e6e6, 0 2px 4px #e6e6e6;\n  transition: .5s all;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  &:hover {\n    transform: translate3d(0, -5px, 0);\n    box-shadow: 0 1px 1px #ccc, 0 4px 4px #ccc;\n  }\n`;\n\nexport const StyledArticle = styled.article`\n  display: inline-block;\n  width: 100%;\n\n  @media (max-width: ${Theme.breakpoints.sm}) {\n    grid-area: unset !important;\n  }\n`;\n\nexport const FeaturedImage = styled(Img)<Pick<CardProps, 'halfImage'>>`\n  background-position: center;\n  background-size: cover;\n  max-width: 100%;\n  border-top-left-radius: 3px;\n\n  ${props => props.halfImage ? `\n    width: 50%;\n    float: left;\n    margin-right: 30px;\n    height: 320px;\n    border-bottom-left-radius: 3px;\n\n    @media (max-width: ${Theme.breakpoints.sm}) {\n      width: 100%;\n      float: none;\n      height: 190px;\n    }\n  ` : `\n    height: 190px;\n    max-height: 190px;\n    width: 100%;\n    border-top-right-radius: 3px;\n  `};\n`;\n\nexport const CardContent = styled.section<{ compact: boolean }>`\n  padding: ${props => props.compact ? '10px' : '40px'};\n\n  p {\n    margin: 15px 0;\n  }\n\n  h2 {\n    font-size: 1.2em;\n  }\n`;\n\nexport const CardMeta = styled.section`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 8px;\n  font-size: .8em;\n  opacity: .8;\n  line-height: 1em;\n`;\n\nexport const CardTitle = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n","import React, {CSSProperties, FunctionComponent, ReactNode} from \"react\";\nimport {CardContent, CardMeta, CardTitle, FeaturedImage, StyledArticle, StyledCard} from \"./style\";\n\nexport interface CardProps {\n  title?: string;\n  path: string;\n  featuredImage?: any;\n  content?: string;\n  meta?: {\n    time: string;\n    timePretty: string;\n    tag: string | null;\n  };\n  halfImage?: boolean;\n  compact?: boolean;\n  style?: CSSProperties;\n  children?: ReactNode;\n}\n\nexport const Card: FunctionComponent<CardProps> = ({\n                                                     title,\n                                                     meta,\n                                                     path,\n                                                     featuredImage,\n                                                     content,\n                                                     halfImage = false,\n                                                     compact = false,\n                                                     style,\n                                                     children,\n                                                   }) => (\n  <StyledArticle style={style}>\n    <StyledCard to={path}>\n      {/* TODO: Oh boy... */}\n      {(featuredImage && featuredImage.fixed) &&\n      <FeaturedImage fixed={featuredImage.fixed} halfImage={halfImage}/>\n      }\n      {(featuredImage && featuredImage.sizes) &&\n      <FeaturedImage sizes={featuredImage.sizes} halfImage={halfImage}/>\n      }\n      <CardContent compact={compact}>\n        {children}\n        <header>\n          {meta &&\n          <CardMeta>\n            {meta.tag && <>{meta.tag}</>}\n            {meta.time &&\n            <time dateTime={meta.time}>{meta.timePretty}</time>\n            }\n          </CardMeta>\n          }\n          {title &&\n          <CardTitle>{title}</CardTitle>\n          }\n        </header>\n        {content &&\n        <p dangerouslySetInnerHTML={{__html: content}}/>\n        }\n      </CardContent>\n    </StyledCard>\n  </StyledArticle>\n);\n"],"sourceRoot":""}